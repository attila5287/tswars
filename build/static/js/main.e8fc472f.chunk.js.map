{"version":3,"sources":["components/Char.tsx","components/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Char","props","char","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","homeworld","films","species","vehicles","starships","created","edited","url","Loading","loading","children","App","useState","chars","setChars","setLoading","getChars","a","axios","get","data","results","console","log","useEffect","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAgCeA,EAzB6B,SAACC,GAC3C,IAAQC,EAASD,EAATC,KAEN,OACE,+BACF,0CAAaA,EAAKC,QAClB,4CAAeD,EAAKE,UACpB,0CAAaF,EAAKG,QAClB,gDAAmBH,EAAKI,cACxB,gDAAmBJ,EAAKK,cACxB,+CAAkBL,EAAKM,aACvB,gDAAmBN,EAAKO,cACxB,4CAAeP,EAAKQ,UACpB,+CAAkBR,EAAKS,aACvB,2CAAcT,EAAKU,SACnB,6CAAgBV,EAAKW,WACrB,8CAAiBX,EAAKY,YACtB,+CAAkBZ,EAAKa,aACvB,6CAAgBb,EAAKc,WACrB,4CAAed,EAAKe,UACpB,yCAAYf,EAAKgB,WCXNC,EAVmC,SAAClB,GAGjD,OAFoBA,EAAZmB,QAGC,kDAGF,mCAAGnB,EAAMoB,YC2BHC,MAjCf,WACE,MAA0BC,mBAAqB,IAA/C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOH,EAAP,KAAgBM,EAAhB,KAEMC,EAAQ,uCAAG,8BAAAC,EAAA,6DACfF,GAAW,GADI,kBAGUG,IAAMC,IAC3B,+CAJW,gBAGLC,EAHK,EAGLA,KAGRN,EAASM,EAAKC,SAND,gDAQbC,QAAQC,IAAI,wBARC,yBAUbR,GAAW,GAVE,4EAAH,qDAkBd,OAJAS,qBAAU,WACRR,MACC,IAGD,8BACE,cAAC,EAAD,CAASP,QAASA,EAAlB,SACGI,EAAMY,KAAI,SAAClC,GACV,OAAO,cAAC,EAAD,CAAsBA,KAAMA,GAAjBA,EAAKC,cCnBlBkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e8fc472f.chunk.js","sourcesContent":["import { FunctionComponent } from \"react\";\r\nimport { CharType } from \"../types\";\r\n\r\ninterface ICharProps {\r\n  char: CharType;\r\n}\r\n\r\nconst Char: FunctionComponent<ICharProps> = (props) => {\r\n  const { char } = props;\r\n\r\n    return (\r\n      <ul>\r\n    <li> name : {char.name}</li>\r\n    <li> height : {char.height}</li>\r\n    <li> mass : {char.mass}</li>\r\n    <li> hair_color : {char.hair_color}</li>\r\n    <li> skin_color : {char.skin_color}</li>\r\n    <li> eye_color : {char.eye_color}</li>\r\n    <li> birth_year : {char.birth_year}</li>\r\n    <li> gender : {char.gender}</li>\r\n    <li> homeworld : {char.homeworld}</li>\r\n    <li> films : {char.films}</li>\r\n    <li> species : {char.species}</li>\r\n    <li> vehicles : {char.vehicles}</li>\r\n    <li> starships : {char.starships}</li>\r\n    <li> created : {char.created}</li>\r\n    <li> edited : {char.edited}</li>\r\n    <li> url : {char.url}</li>\r\n      </ul>\r\n  );\r\n};\r\n\r\nexport default Char;\r\n","import { FunctionComponent } from \"react\";\r\n\r\ninterface ILoadingProps {\r\n  loading: boolean;\r\n}\r\n\r\nconst Loading: FunctionComponent<ILoadingProps> = (props) => {\r\n  const { loading } = props;\r\n\r\n  if (loading) {\r\n    return <>Loading...</>;\r\n  }\r\n\r\n  return <>{props.children}</>;\r\n};\r\n\r\nexport default Loading;\r\n","import axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Char from \"./components/Char\";\nimport { Results,CharType } from \"./types\";\nimport Loading from \"./components/Loading\";\n\nfunction App() {\n  const [chars, setChars] = useState<CharType[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const getChars = async () => {\n    setLoading(true);\n    try {\n      const { data } = await axios.get<Results>(\n        \"https://swapi.dev/api/people/?search=anakin\"\n      );\n      setChars(data.results);\n    } catch {\n      console.log(\"err char fetch swapi\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getChars();\n  }, []);\n\n  return (\n    <div>\n      <Loading loading={loading}>\n        {chars.map((char) => {\n          return <Char key={char.name} char={char} />;\n        })}\n      </Loading>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}