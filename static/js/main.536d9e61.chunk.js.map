{"version":3,"sources":["components/Char.tsx","components/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/helpers.js"],"names":["Char","props","char","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","homeworld","helpers","formatDate","created","edited","href","url","species","map","s","vehicles","v","starships","films","f","Loading","loading","children","App","useState","chars","setChars","setLoading","getChars","term","a","axios","get","data","results","console","log","useEffect","className","onChange","event","q","target","value","trim","handleInputChange","hidden","i","animationIn","animationOut","isVisible","animationInDelay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports","formatAmount","sign","amount","parseInt","toLocaleString","date","Date","getMonth","getDate","getFullYear"],"mappings":"sOAkCeA,EA1B6B,SAACC,GAC3C,IAAQC,EAASD,EAATC,KAEN,OACE,+BAEE,0CAAaA,EAAKC,QAClB,4CAAeD,EAAKE,UACpB,0CAAaF,EAAKG,QAClB,gDAAmBH,EAAKI,cACxB,gDAAmBJ,EAAKK,cACxB,+CAAkBL,EAAKM,aACvB,gDAAmBN,EAAKO,cACxB,4CAAeP,EAAKQ,UACpB,+CAAmBR,EAAKS,aACxB,6CAAgBC,IAAQC,WAAWX,EAAKY,YACxC,4CAAeF,IAAQC,WAAWX,EAAKa,WACvC,yCAAW,mBAAGC,KAAMd,EAAKe,IAAd,SAAoBf,EAAKe,MAApC,OACA,6CAAiBf,EAAKgB,QAAQC,KAAI,SAAAC,GAAC,OAAG,4BAAW,mBAAGJ,KAAMI,EAAT,SAAcA,KAAjBA,SAC9C,8CAAkBlB,EAAKmB,SAASF,KAAI,SAAAG,GAAC,OAAG,4BAAW,mBAAGN,KAAMM,EAAT,SAAcA,KAAjBA,SAChD,+CAAmBpB,EAAKqB,UAAUJ,KAAI,SAAAC,GAAC,OAAG,4BAAW,mBAAGJ,KAAMI,EAAT,SAAcA,KAAjBA,SAClD,2CAAelB,EAAKsB,MAAML,KAAI,SAAAM,GAAC,OAAG,4BAAW,mBAAGT,KAAMS,EAAT,SAAcA,KAAjBA,aCbnCC,EAVmC,SAACzB,GAGjD,OAFoBA,EAAZ0B,QAGC,kDAGF,mCAAG1B,EAAM2B,Y,QC+DHC,MAnEf,WACE,MAA0BC,mBAAqB,IAA/C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOH,EAAP,KAAgBM,EAAhB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACfH,GAAW,GADI,kBAGUI,IAAMC,IAC3B,wCAA0CH,GAJ/B,gBAGLI,EAHK,EAGLA,KAGRP,EAASO,EAAKC,SAND,gDAQbC,QAAQC,IAAI,wBARC,yBAUbT,GAAW,GAVE,4EAAH,sDA2Bd,OAJAU,qBAAU,WACRT,EAAS,YACR,IAGL,sDAAgB,sBAAKU,UAAU,8CAAf,UACA,sBAAKA,UAAU,gEAAf,UACF,mBAAGA,UAAU,sBACb,mBAAGA,UAAU,0BAEb,yBAAQA,UAAU,eAAeC,SAAW,SAACC,GAAD,OAnBtD,SAA4BA,GAC5B,IAAMC,EAAID,EACPE,OACAC,MACAC,OACDT,QAAQC,IAAR,OAAoBK,GACpBb,EAASa,GAasDI,CAAkBL,IAAzE,UACI,wBAAQG,MAAM,GAAWG,QAAM,EAA/B,gBAAqB,KACrB,wBAAQH,MAAM,SAAd,mBAA2B,KAC3B,wBAAQA,MAAM,OAAd,iBAAyB,WAIvC,qBAAKL,UAAU,iBAAf,SACM,cAAC,EAAD,CAASjB,QAAUA,EAAnB,SAEDI,EAAMZ,KAAI,SAACjB,EAAKmD,GACb,OACkB,cAAC,WAAD,CAC1BC,YAAY,eACZC,aAAa,eACbC,WAAW,EACKC,iBAAmB,IAJT,SAQd,cAAC,EAAD,CAAwBvD,KAAOA,GAAnBA,EAAKC,OAHHkD,cCjDfK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,iBCjBAc,EAAOC,QAAU,CACbC,aAAc,SAACC,EAAMC,GAEvB,MAAY,SAARD,EACI,MAAQE,SAASD,GAAQE,iBAAmB,IAE5C,KAAKD,SAASD,GAAQE,kBAG/BjE,WAAY,SAACkE,GAGZ,MAAM,GAAN,OAAU,IAAIC,KAAKD,GAAME,WAAa,EAAtC,YAA2C,IAAID,KAAKD,GAAMG,UAA1D,YAEC,IAAIF,KAAKD,GAAMI,cAAgB,M","file":"static/js/main.536d9e61.chunk.js","sourcesContent":["import { FunctionComponent } from \"react\";\r\nimport { CharType, FilmType } from \"../types\";\r\nimport helpers from \"../utils/helpers\";\r\n\r\ninterface ICharProps {\r\n  char: CharType;\r\n}\r\n\r\nconst Char: FunctionComponent<ICharProps> = (props) => {\r\n  const { char } = props;\r\n \r\n    return (\r\n      <ul>\r\n            \r\n        <li> name : {char.name}</li>\r\n        <li> height : {char.height}</li>\r\n        <li> mass : {char.mass}</li>\r\n        <li> hair_color : {char.hair_color}</li>\r\n        <li> skin_color : {char.skin_color}</li> \r\n        <li> eye_color : {char.eye_color}</li>\r\n        <li> birth_year : {char.birth_year}</li>\r\n        <li> gender : {char.gender}</li>\r\n        <li> homeworld : { char.homeworld }</li>\r\n        <li> created : {helpers.formatDate(char.created)}</li>\r\n        <li> edited : {helpers.formatDate(char.edited)}</li>\r\n        <li> url : <a href={char.url}>{char.url}</a> </li>\r\n        <li> species : { char.species.map(s=>(<p key={s}><a href={s}>{ s }</a></p>)) }</li>\r\n        <li> vehicles : { char.vehicles.map(v=>(<p key={v}><a href={v}>{ v }</a></p>))}</li>\r\n        <li> starships : { char.starships.map(s=>(<p key={s}><a href={s}>{ s }</a></p>)) }</li>\r\n        <li> films : { char.films.map(f=>(<p key={f}><a href={f}>{ f }</a></p>))}</li>\r\n      </ul>\r\n  );\r\n};\r\n\r\nexport default Char;\r\n","import { FunctionComponent } from \"react\";\r\n\r\ninterface ILoadingProps {\r\n  loading: boolean;\r\n}\r\n\r\nconst Loading: FunctionComponent<ILoadingProps> = (props) => {\r\n  const { loading } = props;\r\n\r\n  if (loading) {\r\n    return <>Loading...</>;\r\n  }\r\n\r\n  return <>{props.children}</>;\r\n};\r\n\r\nexport default Loading;\r\n","import axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Char from \"./components/Char\";\nimport { Results, CharType } from \"./types\";\nimport Loading from \"./components/Loading\";\nimport {Animated} from 'react-animated-css';\nimport \"./index.css\";\n\nfunction App() {\n  const [chars, setChars] = useState<CharType[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const getChars = async (term) => {\n    setLoading(true);\n    try {\n      const { data } = await axios.get<Results>(\n        \"https://swapi.dev/api/people/?search=\" + term\n      );\n      setChars(data.results);\n    } catch {\n      console.log(\"err char fetch swapi\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  // Loads all books and sets them to books\n    function handleInputChange (event) {\n    const q = event\n      .target\n      .value\n      .trim()\n      console.log(`>> q`, q)\n      getChars(q)\n\n  };\n  useEffect(() => {\n    getChars('anakin');\n  }, []);\n\n  return (\n<>              <nav className=\"navbar navbar-expand navbar-dark bg-primary\">\n                <div className=\"btn btn-outline-info disabled my-2 my-sm-0 btn-lg text-nowrap\">\n              <i className='fab fa-rebel mx-2'></i>\n              <i className='fab fa-empire mx-2'></i>\n                </div>                  \n              <select className='form-control' onChange={ (event) => handleInputChange(event) }>\n                  <option value=\"\" key=\"0\" hidden>...</option>\n                  <option value=\"anakin\" key=\"1\">anakin</option>\n                  <option value=\"luke\" key=\"2\">luke</option>\n          </select>\n                  \n              </nav>\n    <div className='container pt-2'>\n          <Loading loading={ loading }>\n\n        {chars.map((char,i) => {\n            return (\n                              <Animated\n\t\t\t\tanimationIn='bounceInLeft'\n\t\t\t\tanimationOut='bounceInLeft'\n\t\t\t\tisVisible={true}\n                    animationInDelay={ 500 }\n                        key={ i }\n                    \n              >\n                <Char key={ char.name } char={ char } />\n                    \n              </Animated>\n            );\n        }) }\n      </Loading>\n    </div></>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootswatch/dist/slate/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\r\n    formatAmount: (sign, amount) => {\r\n\t\t// format large numbers with commas\r\n\t\tif (sign == 'minus') {\r\n\t\t\treturn '$ (' + parseInt(amount).toLocaleString() + ')';\r\n\t\t} else {\r\n\t\t\treturn '$ '+parseInt(amount).toLocaleString();\r\n\t\t}\r\n\t},\r\n\tformatDate: (date) => {\r\n\t\t// Using JavaScript Date methods, we get and format the month, date, and year\r\n\t\t// We need to add one to the month since it is returned as a zero-based value\r\n\t\treturn `${new Date(date).getMonth() + 1}/${new Date(date).getDate()}/${\r\n\t\t\t// We add five years to the 'year' value to calculate the end date\r\n\t\t\tnew Date(date).getFullYear() + 5\r\n\t\t}`;\r\n\t}, \r\n \r\n\r\n};\r\n"],"sourceRoot":""}